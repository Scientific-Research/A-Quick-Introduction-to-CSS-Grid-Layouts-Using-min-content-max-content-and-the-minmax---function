.container {
  width: 1000px;
  margin: 30px auto;
  background-color: #ddd;

  // let's define our explicit grid:
  display: grid;
  // grid-template-rows: repeat(2, 150px); // two items are explicit and other 6 items are implicitly added!

  // grid-template-columns: max-content 1fr 1fr min-content;
  // max-content takes the max width which this item needs and not more => this means max-content
  // of course, when we have two items and one is larger than others, max-content takes width of
  // the larger one for both items => it happens here for "Modern" and "and" items!
  // grid-template-rows: repeat(2, min-content);
  // grid-template-rows: 150px min-content;
  // grid-template-rows: min-content min-content; // min-content => it zipps the row as possible as
  // it can! => just leave the space as it needs!
  // when we set the row as 150px and out text is large, it will no longer fits and it will overflows!
  // that's why the best option is that we use min-content instead of 150px. with min-content
  // it will automatically set the required space for the content, not more and not less!

  // grid-template-rows: repeat(2, minmax(min-content, min-content));
  // width: 90%;
  // grid-template-rows: repeat(2, minmax(150px, min-content));
  // min height: 150px and max-height: min-content => it fits automatically for the required
  // space for our item, not more, not less!

  // grid-template-columns: minmax(200px, 300px) repeat(3, 1fr);
  // grid-template-columns: minmax(200px, 50%) repeat(3, 1fr);
  // grid-template-columns: minmax(200px, 1fr) repeat(3, 1fr);
  // note: the first item takes the maximum width and other three which have 1fr => takes the remaing
  // divided by 3. when we decrease the width, the fits item takes minimum width and other 3 items
  // take what stays as remaining!

  // using auto-fill and auto-fit
  grid-template-rows: repeat(2, minmax(150px, min-content));

  // grid-template-columns: repeat(4, 1fr);
  grid-template-columns: repeat(auto-fill, 100px);
  // auto-fill: fill the columns automatically out and we have 1000px in row / 100px = 10 columns

  grid-template-columns: repeat(auto-fit, 100px);
  // we have still our 10 columns but they will be fit to our 8 needed columns automatically
  // and the last two columns will have width 0, that's why we don't see them!

  //////////////////////RESPONSIVE DESIGN WITH GRID - ONLY WITH THIS 3 LINES//////
  width: 90%;
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
  grid-auto-rows: 150px;
  // with this, we have an absolutely fantastic responsive design:
  // with this TRICK using auto-fit and minmax(Xpx,1fr), we can produces very responsive webpages!
  // and then we don't need to write any media query, flexbox or something like that!
  //////////////////////RESPONSIVE DESIGN WITH GRID - ONLY WITH THIS 3 LINES///////

  .item {
    padding: 10px;
    color: white;
    font-family: sans-serif;
    font-size: 30px;
    background-color: orangered;

    &--1 {
      background-color: orangered;
    }
    &--2 {
      background-color: yellowgreen;
    }
    &--3 {
      background-color: blueviolet;
    }
    &--4 {
      background-color: palevioletred;
    }
    &--5 {
      background-color: royalblue;
    }
    &--6 {
      background-color: goldenrod;
    }
    &--7 {
      background-color: crimson;
    }
    &--8 {
      background-color: darkslategray;
    }
  }
}
